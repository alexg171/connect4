from DecisionTree import DecisionNode,DecisionTree

class Piece:
    Player1 = 1
    Player2 = 2
    Empty = 3



class Board:
    def __init__(self, width, height):
        self.width = width
        self.height = height
        self.data = [[Piece.Empty for x in range(height)] for y in range(width)]
        self.fullColumns = []

    def drop(self, x, value):
        if (x in self.fullColumns):
            print("Column full")
        else:
            drop_row = self.getDropY(x)
            self.set(x, drop_row, value)
    def getColumns(self):
        return self.width
    def getFullColumns(self):
        return self.fullColumns
    def getDropY(self, x):
        for i in reversed(range(self.height)):
            if self.data[x][i] == Piece.Empty:
                if i == 0:
                    self.fullColumns.append(x)
                return i

    def set(self, x, y, value):
        self.data[x][y] = value

    def get(self, x, y):
        return self.data[x][y]

    def print(self):
        for i in range(self.height):
            for j in range(self.width):
                print(self.data[j][i], "", end="")
            print("")

    def countNumInRow(self, connect, player):
        count = 0
        numinrow = 0
        for i in range(self.width):
            for j in range(self.height):
                # diag right
                for k in range(connect - 1):
                    if i + k + 1 > self.width - 1 or j + k + 1 > self.height - 1:
                        break
                    if self.data[i + k][j + k] == self.data[i + k + 1][j + k + 1] and self.data[i][j] != 3:
                        count = count + 1
                        if count == connect - 1:
                            if (self.data[i][j] == player):
                                numinrow=numinrow+1
                    else:
                        break
                count = 0
                # diag left
                for k in range(connect - 1):
                    if i - k - 1 < 0 or j - k - 1 < 0:
                        break
                    if self.data[i - k][j - k] == self.data[i - k - 1][j - k - 1] and self.data[i][j] != 3:
                        count = count + 1
                        if count == connect - 1:
                            if (self.data[i][j] == player):
                                numinrow=numinrow+1
                    else:
                        break
                count = 0
                # horiz
                for k in range(connect - 1):
                    if i + k + 1 > self.width - 1:
                        break
                    if self.data[i + k][j] == self.data[i + k + 1][j] and self.data[i][j] != 3:
                        count = count + 1
                        if count == connect - 1:
                            if (self.data[i][j] == player):
                                numinrow=numinrow+1
                    else:
                        break
                count = 0
                # vert
                for k in range(connect - 1):
                    if j + k + 1 > self.height - 1:
                        break
                    if self.data[i][j + k] == self.data[i][j + k + 1] and self.data[i][j] != 3:
                        count = count + 1
                        if count == connect - 1:
                            if (self.data[i][j] == player):
                                numinrow=numinrow+1
                    else:
                        break
                count = 0
        return numinrow
    def isEqual(self, board):
        for i in range(self.width):
            for j in range(self.height):
                if(self.data[i][j] != board.data[i][j]):
                    return False
        return True
    def checkEnd(self, connect):
        count = 0;
        for i in range(self.width):
            for j in range(self.height):
                # diag right
                for k in range(connect - 1):
                    if i + k + 1 > self.width - 1 or j + k + 1 > self.height - 1:
                        break
                    if self.data[i + k][j + k] == self.data[i + k + 1][j + k + 1] and self.data[i][j] != 3:
                        count = count + 1
                        if count == connect - 1:
                            if (self.data[i][j] == 1):
                                return 1
                            if (self.data[i][j] == 2):
                                return 2
                    else:
                        break
                count = 0
                # diag left
                for k in range(connect - 1):
                    if i - k - 1 < 0 or j - k - 1 < 0:
                        break
                    if self.data[i - k][j - k] == self.data[i - k - 1][j - k - 1] and self.data[i][j] != 3:
                        count = count + 1
                        if count == connect - 1:
                            if (self.data[i][j] == 1):
                                return 1
                            if (self.data[i][j] == 2):
                                return 2
                    else:
                        break
                count = 0
                # horiz
                for k in range(connect - 1):
                    if i + k + 1 > self.width - 1:
                        break
                    if self.data[i + k][j] == self.data[i + k + 1][j] and self.data[i][j] != 3:
                        count = count + 1
                        if count == connect - 1:
                            if (self.data[i][j] == 1):
                                return 1
                            if (self.data[i][j] == 2):
                                return 2
                    else:
                        break
                count = 0
                # vert
                for k in range(connect - 1):
                    if j + k + 1 > self.height - 1:
                        break
                    if self.data[i][j + k] == self.data[i][j + k + 1] and self.data[i][j] != 3:
                        count = count + 1
                        if count == connect - 1:
                            if (self.data[i][j] == 1):
                                return 1
                            if (self.data[i][j] == 2):
                                return 2
                    else:
                        break
                count = 0
        return -1;


def main():
    example = Board(7, 6)
    example.drop(0, 1)
    example.drop(1, 2)
    # example.drop(0,1)
    example.drop(0, 1)
    example.drop(0, 1)
    example.drop(0, 1)
    example.drop(1, 2)
    example.drop(1, 1)
    example.drop(2, 2)
    # example.drop(2,1)
    example.drop(3, 1)
    example.print();

    print("---------------")
    tree = DecisionTree(DecisionNode(-1, example))
    tree.generateTree(tree.getRoot(),7,1)
    tree.getBestMove(tree.getRoot(),7, 1, [])
    print("Best move:", tree.movewhere)
    #print("num of 3 rows:", example.countNumInRow(3,1))



if __name__ == "__main__": main()
